// -*- c++ -*-
#ifndef MSL_REGISTRY_ICC
#define MSL_REGISTRY_ICC

namespace Msl
{
  //----------------------------------------------------------------------------------
  //
  // Templated global functions 
  //
  template<typename T> bool KeyExists(const std::vector<Msl::DataPair<std::string, T> > &dvec,
				      const std::string &key) {
    typename std::vector<Msl::DataPair<std::string,T> >::const_iterator it = std::find(dvec.begin(), dvec.end(), key);
    return (it != dvec.end());
  }
  
  //----------------------------------------------------------------------------------
  template<typename T> bool RemoveKey(std::vector<Msl::DataPair<std::string,T> > &dvec,
				      const std::string &key) {
    typename std::vector<Msl::DataPair<std::string, T> >::iterator it = std::find(dvec.begin(), dvec.end(), key);
    if(it != dvec.end()) {
      dvec.erase(it);
      return true;
    }
    
    return false;       
  }

  //----------------------------------------------------------------------------------
  template<typename T> bool GetVal(const std::vector<Msl::DataPair<std::string,T> > &dvec,
				   const std::string &key, T &val)
  {
    typename std::vector<Msl::DataPair<std::string,T> >::const_iterator it = std::find(dvec.begin(), dvec.end(), key);
    if(it != dvec.end()) {
      val = it -> Data();
      return true;
    }
    
    return false;
  } 
  
  //----------------------------------------------------------------------------------
  template<typename T> void Print(const std::vector<Msl::DataPair<std::string,T> > &dvec,
				  std::ostream &os,
				  const std::string &dtype, 
				  unsigned int margin,
				  const std::string &key) {
    unsigned int keyw = 0;
    for(unsigned int i = 0; i < dvec.size(); ++i) {
      keyw = std::max<unsigned int>(keyw, dvec[i].Key().size());
    }

    for(unsigned int i = 0; i < dvec.size(); ++i) {
      if(!key.empty() && dvec[i].Key().find(key) == std::string::npos) continue;

      for(unsigned int p = 0; p < margin; ++p) {
	os << ' ';
      }

      std::stringstream kstr;
      kstr << "\"" << dvec[i].Key() << "\"";

      os << dtype << " " << std::setw(keyw+2) << std::left << kstr.str()
	 << ": \"" << std::setprecision(10) << dvec[i].Data() << "\"" << std::endl;
    }
  }

  //----------------------------------------------------------------------------------
  //
  // Default implemenations - values are numbers
  //
  //----------------------------------------------------------------------------------
  template<class T> inline bool Registry::Get(const std::string &key, T &val) const
  {
    long double val_dbl = val;
    if(GetVal<long double>(fDbl, key, val_dbl)) {
      val = static_cast<T>(val_dbl);
      return true;
    }
    
    return false;
  }

  //----------------------------------------------------------------------------------
  template<class T> inline void Registry::Set(const std::string &key, const T &val)
  {
    if(fUniqueKeys && KeyExists(key)) {
      RemoveKey(key);
    }

    fDbl.push_back(Msl::Registry::DblData(key, val));
  }

  //----------------------------------------------------------------------------------
  template<class T> inline bool Registry::Get(const std::string &algorithm, 
					      const std::string &key, T &val) const
  {
    if(Get<T>(std::string(algorithm+"::"+key), val)) return true;
    return Get<T>(key, val);
  }

  //----------------------------------------------------------------------------------
  template<class T> inline bool Registry::GetVec(const std::string &key, 
						 std::vector<T> &val) const
  {
    //
    // Check if key exists in fDbl
    //  
    const typename std::vector<DblData>::const_iterator it = std::find(fDbl.begin(), fDbl.end(), key);
    if(it != fDbl.end()) {
      val.push_back(static_cast<T>(it->getData()));
      return true;
    }

    //
    // Convert string list to vector<T>
    //
    std::string tmp;
    std::vector<std::string> vec;
    
    if(!Msl::GetVal<std::string>(fStr, key, tmp)) return false;
    Msl::StringTok(vec, tmp, ", ");
    
    for(unsigned int i = 0; i < vec.size(); ++i) {
      std::stringstream valS;
      T val_tmp = 0;
      
      valS << vec[i];
      valS >> val_tmp;
      
      if(valS.fail()) {
	std::cerr << "Registry::GetVec(" << key << ") - operator>> failed for value=" << vec[i] << std::endl;
      } 
      else {
	val.push_back(val_tmp);
      }
    }
    
    return true;
  }

  //----------------------------------------------------------------------------------
  template<class T> inline bool Registry::GetVec(const std::string &alg, 
						 const std::string &key, 
						 std::vector<T> &val) const
  {
    if(GetVec<T>(alg+"::"+key, val)) return true;
    return GetVec<T>(key, val);
  }

  //----------------------------------------------------------------------------------
  //
  // Template specializations
  //
  template<> inline bool Registry::Get<std::string>(const std::string &key, std::string &val) const
  {
    return GetVal<std::string>(fStr, key, val);
  }

  //----------------------------------------------------------------------------------
  template<> inline bool Msl::Registry::Get<Msl::Registry>(const std::string &key, Registry &val) const
  {
    return GetVal<Msl::Registry>(fReg, key, val);
  }
 
  //----------------------------------------------------------------------------------
  template<> inline bool Msl::Registry::Get<bool>(const std::string &key, bool &val) const
  {
    std::string tmp;
    if(GetVal<std::string>(fStr, key, tmp)) {
    
      const int bool_val = StringToBool(tmp);
      
      if(bool_val == 0) {
	val = false;
	return true;
      }
      if(bool_val == 1) {
	val = true;
	return true;
      }
    }

    long double dval = 0.0;
    if(GetVal<long double>(fDbl, key, dval)) {
    
      if(!(dval < 0.0) && !(dval > 0.0)) {
	val = false;
	return true;
      }
      if(!(dval < 1.0) && !(dval > 1.0)) {
	val = true;
	return true;
      }
    }
    
    return false;
  }
  
  //----------------------------------------------------------------------------------
  template<> inline void Msl::Registry::Set<std::string>(const std::string &key, const std::string &val)
  {
    if(fUniqueKeys && KeyExists(key)) {
      RemoveKey(key);
    }
    
    fStr.push_back(Msl::DataPair<std::string, std::string> (key, val));
  }

  //----------------------------------------------------------------------------------
  template<> inline void Msl::Registry::Set<char>(const std::string &key, const char *var)
  {
    if(!var) {
      std::cerr << "Registry::Set<char> - null char pointer for key=" << key << std::endl;
      return;
    }

    if(fUniqueKeys && KeyExists(key)) {
      RemoveKey(key);
    }
    
    fStr.push_back(StrData(key, std::string(var)));
  }

  //----------------------------------------------------------------------------------
  template<> inline void Msl::Registry::Set<bool>(const std::string &key, const bool &val)
  {
    if(fUniqueKeys && KeyExists(key)) {
      RemoveKey(key);
    }
    
    if(val) fStr.push_back(StrData(key, "yes"));
    else    fStr.push_back(StrData(key, "no"));
  }
  
  //----------------------------------------------------------------------------------
  template<> inline void Msl::Registry::Set<Msl::Registry>(const std::string &key, const Registry &val)
  {
    if(fUniqueKeys && KeyExists(key)) {
      RemoveKey(key);
    }

    fReg.push_back(RegData(key, val));
  }
  
  //----------------------------------------------------------------------------------
  template<> inline bool Msl::Registry::Get<bool>(const std::string &algorithm, 
						  const std::string &key, 
						  bool &val) const
  {
    if(Get<bool>(std::string(algorithm+"::"+key), val)) return true;
    return Get<bool>(key, val);
  }

  //----------------------------------------------------------------------------------
  template<> inline bool Msl::Registry::Get<std::string>(const std::string &algorithm, 
							 const std::string &key, 
							 std::string &val) const
  {
    if(Get<std::string>(std::string(algorithm+"::"+key), val)) return true;
    return Get<std::string>(key, val);
  }

  //----------------------------------------------------------------------------------
  template<> inline bool Msl::Registry::GetVec<std::string>(const std::string &key, 
							    std::vector<std::string> &val) const
  {
    std::string tmp;
    if(!Msl::GetVal<std::string>(fStr, key, tmp)) return false;
    Msl::StringTok(val, tmp, ", ");
    return true;
  }

  //----------------------------------------------------------------------------------
  template<> inline bool Msl::Registry::GetVec<std::string>(const std::string &alg, 
							    const std::string &key, 
							    std::vector<std::string> &val) const
  {
    if(GetVec<std::string>(alg+"::"+key, val)) return true;
    return GetVec<std::string>(key, val);
  }
}

#endif

